module.exports = [
  {
    "q": "Что вернет вызов метода 'foo.bar()'?\nvar foo = {bar () {\n    return this}\n}\n\nfoo.bar()",
    "a": [
      "window",
      "bar",
      "foo",
      "undefined"
    ],
    "v": 3,
    "c": "js"
  },
  {
    "q": "Чему равна переменная 'method', если переменная 'bar' равна 6?\nfunction foo (a, b) {\n    return this + a + b\n}\n\nvar bar = foo[method](1, 2, 3)",
    "a": [
      "bind",
      "call",
      "apply",
      "Ничего из перечисленного"
    ],
    "v": 2,
    "c": "js"
  },
  {
    "q": "Что запишется в переменную args?\nfunction foo () {\n    return arguments.length\n}\n\nvar args = foo(1, 2, 3)",
    "a": [
      "Ошибка, arguments не является массивом",
      "3, количество переданных в функцию аргументов",
      "undefined, arguments является псевдомассивом и не содержит длины",
      "Ошибка, arguments не существует"
    ],
    "v": 2,
    "c": "js"
  },
  {
    "q": "Что выведется в консоль?\nvar foo = [1, 2, 3]\n\nfoo.length = 1\nfoo.length = 3\n\nconsole.log(foo)",
    "a": [
      "[1, 2, 3]",
      "[1]",
      "[1, undefined, undefined]",
      "Ошибка, `foo.length` является readonly свойством"
    ],
    "v": 3,
    "c": "js"
  },
  {
    "q": "Верно ли утверждение, что `void 0 !== undefined`?",
    "a": [
      "Да",
      "Нет",
      "Только при `use strict`",
      "Только в новых спецификациях и браузерами пока что не поддерживается"
    ],
    "v": 2,
    "c": "js"
  },
  {
    "q": "Что будет в переменной 'foo.bar'?\nconst bar = {}\nconst foo = {bar: bar}\n\ndelete foo.bar",
    "a": [
      "Вернется ошибка присвоения, поскольку 'bar' - константа",
      "{}",
      "Вернется ошибка синтаксиса, необходимо использовать 'foo.bar = undefined'",
      "undefined"
    ],
    "v": 4,
    "c": "js"
  },
  {
    "q": "Что выведется в консоль?\nvar foo = {}\nfoo.bar = foo\n\nconsole.log(foo.bar.bar)",
    "a": [
      "Вернется циклическая структура, с бесконечной вложенностью свойства bar",
      "Вернется ошибка переполнения стэка",
      "Вернется ошибка, что foo.bar.bar не существует",
      "Вернется ошибка преобразования циклической структуры"
    ],
    "v": 1,
    "c": "js"
  },
  {
    "q": "\nВерно ли утверждение, что `Array.prototype === [].__proto__`",
    "a": [
      "Да",
      "Нет",
      "prototype не существует",
      "__proto__ не существует"
    ],
    "v": 1,
    "c": "js"
  },
  {
    "q": "\nЧему равен type?\nvar type = typeof [] instanceof Array",
    "a": [
      "Случится ошибка синтаксиса",
      "false",
      "'object'",
      "'boolean'"
    ],
    "v": 2,
    "c": "js"
  },
  {
    "q": "\nЧто выведется в консоль?\nfunction foo (a) { }\n\nconsole.log(foo.length)",
    "a": [
      "Количество символов от ключевого слова 'function' до конца тела функции",
      "Количество символов внутри тела функции, то есть 1",
      "Количество принимаемых функцией аргументов, то есть 1",
      "undefined, у функций нет свойства length"
    ],
    "v": 3,
    "c": "js"
  },
  {
    "q": "Чему равно свойство 'foo.x'?\nvar foo = {baz: true}\nvar bar = foo\nfoo.x = foo = {baz:false}",
    "a": [
      "{baz: true, x: {baz: false}}",
      "{baz: false}",
      "{baz: true}",
      "undefined"
    ],
    "v": 4,
    "c": "js"
  },
  {
    "q": "Что выведется в консоль?\nvar a = 10;\n(function a(){\n    if(!a) {\n        var a = 12\n    }\n    console.log(a)\n})()",
    "a": [
      "10",
      "12",
      "undefined",
      "ƒ (){}"
    ],
    "v": 2,
    "c": "js"
  },
  {
    "q": "Какого оператора нет в JavaScript?",
    "a": [
      ">>>=",
      "<|",
      "**",
      ","
    ],
    "v": 2,
    "c": "js"
  },
  {
    "q": "Какие объекты называют «экзотическими?»",
    "a": [
      "Объекты с нетипичным поведением внутренних методов",
      "Объекты, которые редко встречаются в коде",
      "Объекты, не входящие в спецификацию EcmaScript",
      "Объекты, не наследованные от класса Object"
    ],
    "v": 1,
    "c": "js"
  },
  {
    "q": "Какой из этих классов позволяет модифицировать методы объекта?",
    "a": [
      "Reflect",
      "Global",
      "Proxy",
      "Object"
    ],
    "v": 3,
    "c": "js"
  },
  {
    "q": "Какой тип у null?",
    "a": [
      "'null'",
      "'object'",
      "'void'",
      "'undefined'"
    ],
    "v": 2,
    "c": "js"
  },
  {
    "q": "Что из нижеперечисленного является оператором?",
    "a": [
      "eval",
      "void",
      "null",
      "NaN"
    ],
    "v": 2,
    "c": "js"
  },
  {
    "q": "Какое из этих чисел больше?",
    "a": [
      "Math.LN10",
      "Number.EPSILON",
      "3",
      "Math.E"
    ],
    "v": 3,
    "c": "js"
  },
  {
    "q": "Какого метода не существует в спецификации EcmaScript 6?",
    "a": [
      "Promise.resolve",
      "Promise.all",
      "Promise.reject",
      "Promise.each"
    ],
    "v": 4,
    "c": "js"
  },
  {
    "q": "Какой вариант деструктуризации создаст ошибку?",
    "a": [
      "var {foo, bar, baz} = qux",
      "var {foo, bar, baz, ...spread} = qux",
      "var {...spread, foo, bar, baz} = qux",
      "var {foo, bar: { baz }} = qux"
    ],
    "v": 3,
    "c": "js"
  },
  {
    "q": "Какая запись является синтаксически неправильной?",
    "a": [
      "var foo = bar, baz => qux",
      "var foo = (bar, baz) => baz",
      "var foo = bar => baz",
      "var foo = () => baz"
    ],
    "v": 1,
    "c": "js"
  },
  {
    "q": "Какого состояния нет у Promise?",
    "a": [
      "initialized",
      "pending",
      "fulfilled",
      "rejected"
    ],
    "v": 1,
    "c": "js"
  },
  {
    "q": "Какого оператора присваивания не существует",
    "a": [
      "*=",
      "**=",
      "+=",
      "="
    ],
    "v": 2,
    "c": "js"
  },
  {
    "q": "Какой объект не является стандартным встроенным в движок JS?",
    "a": [
      "Generator",
      "Symbol",
      "React",
      "Error"
    ],
    "v": 3,
    "c": "js"
  },
  {
    "q": "При каком преобразовании применяется метод 'valueOf()'?",
    "a": [
      "Численное",
      "Строковое",
      "Логическое",
      "Метод применяется только по факту вызова"
    ],
    "v": 1,
    "c": "js"
  }
];
