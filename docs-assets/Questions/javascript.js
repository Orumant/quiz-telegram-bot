module.exports = [
    {
        q: `
Что вернет вызов метода \`foo.bar()\`?
\`\`\`
var foo = {
    bar () {
        return this
    }
}

foo.bar()
\`\`\`
    `,
        a: [
            "window",
            "bar",
            "foo",
            "undefined"
        ],
        v: 3,
        c: "js"
    },
    {
        q: `
Чему равна переменная \`method\`, если в консоль выводится \`6\`?
\`\`\`
function foo (a, b) {
    return this + a + b
}

var bar = foo[method](1, 2, 3)

console.log(bar)
\`\`\`
    `,
        a: [
            "`bind`",
            "`call`",
            "`apply`",
            "Ничего из перечисленного"
        ],
        v: 2,
        c: "js"
    },
    {
        q: `
Что вернет вызов функции \`foo(1, 2, 3)\`?
\`\`\`
function foo () {
    return arguments.length
}

foo(1, 2, 3)
\`\`\`
    `,
        a: [
            "Ошибка, `arguments` не является массивом",
            "Вернется `3`, количество переданных в функцию аргументов",
            "Вернется `undefined`, arguments является псевдомассивом и не содержит длины",
            "Ошибка, `arguments` не существует"
        ],
        v: 2,
        c: "js"
    },
    {
        q: `
Что выведется в консоль?
\`\`\`
var foo = [1, 2, 3]

foo.length = 1
foo.length = 3

console.log(foo)
\`\`\`
    `,
        a: [
            "[1, 2, 3]",
            "[1]",
            "[1, undefined, undefined]",
            "Ошибка, `foo.length` является readonly свойством"
        ],
        v: 3,
        c: "js"
    },
    {
        q: `
Верно ли утверждение, что \`void 0 !== undefined\`?
    `,
        a: [
            "Да",
            "Нет",
            "Только при `use strict`",
            "Только в новых спецификациях и браузерами пока что не поддерживается"
        ],
        v: 2,
        c: "js"
    },
    {
        q: `
Что выведется в консоль?
\`\`\`
const bar = {}
const foo = {
    bar: bar
}

delete foo.bar

console.log(foo.bar)
\`\`\`
    `,
        a: [
            "Вернется ошибка присвоения, поскольку `bar` - константа",
            "{}",
            "Вернется ошибка синтаксиса, необходимо использовать `foo.bar = undefined`",
            "undefined"
        ],
        v: 4,
        c: "js"
    },
    {
        q: `
Что выведется в консоль?
\`\`\`
var foo = {}
foo.bar = foo

console.log(foo.bar.bar)
\`\`\`
    `,
        a: [
            "Вернется циклическая структура, с бесконечной вложенностью свойства `bar`",
            "Вернется ошибка переполнения стэка",
            "Вернется ошибка, что `foo.bar.bar` не существует",
            "Вернется ошибка преобразования циклической структуры"
        ],
        v: 1,
        c: "js"
    },
    {
        q: `
Верно ли утверждение, что \`Array.prototype === [].__proto__\`
    `,
        a: [
            "Да",
            "Нет",
            "`prototype` не существует",
            "`__proto__` не существует"
        ],
        v: 1,
        c: "js"
    },
    {
        q: `
Что выведется в консоль?
\`\`\`
var type = typeof [] instanceof Array

console.log(type)
\`\`\`
    `,
        a: [
            "Случится ошибка синтаксиса",
            "false",
            "'object'",
            "'boolean'"
        ],
        v: 2,
        c: "js"
    },
    {
        q: `
Что выведется в консоль?
\`\`\`
function foo (a) { }

console.log(foo.length)
\`\`\`
    `,
        a: [
            "Количество символов от `function` до `{ }`",
            "Количество символов внутри `{ }`, то есть `1`",
            "Количество принимаемых функцией аргументов, то есть `1`",
            "`undefined`, у функций нет свойства `length`"
        ],
        v: 3,
        c: "js"
    }
]
